/**
  ******************************************************************************
  * @file    subsystems/subsys_ContinousContorl/src/MpcControle.cpp
  * @author  Richard Andrade
  * @version V1.0.0
  * @date    17-Nov-2015
  * @brief   LQR Controler estabilization.
  *****************************************************************************/

/* Includes ------------------------------------------------------------------*/
#include "LQRControler.h"
/* Private typedef -----------------------------------------------------------*/
using namespace Eigen;
using namespace TRAJECTORY;

//std::chrono::steady_clock::time_point last;
namespace LQR {
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
MatrixXf Ke(4,18);
MatrixXf auxu(4,1);
MatrixXf u(4,1);
MatrixXf ur(4,1);
MatrixXf deltaU(4,1);
MatrixXf xsi(2,1);
MatrixXf xsiant(2,1);
MatrixXf deltaxsi(2,1);
MatrixXf deltaxsiant(2,1);
MatrixXf xs(16,1);
MatrixXf deltaxs(16,1);
MatrixXf xr(16,1);
MatrixXf xs_aumented(18,1);
int nWSR;
float ts;
/* Exported functions definitions --------------------------------------------*/

LQRControler::LQRControler() {
	trajectory=new ReferenceTrajectory();
	Ke=Gain(1);
	deltaxsiant.setZero();
	xsiant.setZero();
	ts=0.012;
}

LQRControler::~LQRControler() {
	// TODO Auto-generated destructor stub
}

Eigen::MatrixXf LQRControler::Controler(Eigen::MatrixXf states,bool stop){

	if(stop){
		xs.setZero();
		xr.setZero();
		deltaxsi.setZero();
		xsi.setZero();
		xsiant.setZero();
		deltaxsi.setZero();
		deltaxsiant.setZero();
		deltaxs.setZero();
		xs_aumented.setZero();
		deltaxs.setZero();
		xsi.setZero();
		deltaU.setZero();
		xs_aumented.setZero();
		ur.setZero();
		auxu.setZero();
		ur.setZero();
		deltaU.setZero();
		xsiant.setZero();
		xsi.setZero();
		deltaxsiant.setZero();
		deltaxsi.setZero();
	}else{
		//Vectors of reference trajectory and control
		xs<<0,0,3,states.block(3,0,5,1),0,0,0,states.block(11,0,5,1);
		xr=trajectory->TrajetoryReference_LQR();

		//Vector integration of error(Trapezoidal method)
		deltaxsi<<xs(2,0)-xr(2,0),xs(5,0)-xr(5,0);
		xsi=xsiant+ts*(deltaxsi+deltaxsiant)/2;

		// Error state vector
		deltaxs=xs-xr;
		// augmented error state vector
		xs_aumented<<deltaxs,xsi;
		//Control action variation
		deltaU=Ke*xs_aumented;
		//Control reference
		ur<<9857.54,9837.48,0,0;
		// Total control action
		auxu=ur+deltaU;
		//Variable update
		xsiant=xsi;
		deltaxsiant=deltaxsi;
	}

	if(auxu(0,0)>15000 ){
		auxu(0,0)=15000;
	}
	if(auxu(1,0)>15000 ){
		auxu(1,0)=15000;
	}
	/*The mass in the mathematical model was taken in grams,
	for this reason the controller calculate the forces in g .m/s^2 and the torque in g .m^2/s^2.
	But, the actuators are in the international units N and N. m for this reason the controls
	actions are transforming from g to Kg*/
	u(0,0)=auxu(0,0)/1000;
	u(1,0)=auxu(1,0)/1000;
	u(2,0)=auxu(2,0)/1000;
	u(3,0)=auxu(3,0)/1000;

	return u;
}
/* Private functions ------------------------------------------------------- */

Eigen::MatrixXf LQRControler::Gain(int a){
	MatrixXf Ke(4,18);
	switch (a){
		case 1:
			Ke(0,0)=-0.244068;
			Ke(0,1)=-19.285325;
			Ke(0,2)=-69559.995180;
			Ke(0,3)=5354.312313;
			Ke(0,4)=-63.306232;
			Ke(0,5)=243.304657;
			Ke(0,6)=-114.804908;
			Ke(0,7)=62.424610;
			Ke(0,8)=-2.798968;
			Ke(0,9)=-226.085767;
			Ke(0,10)=-15989.214793;
			Ke(0,11)=1263.232411;
			Ke(0,12)=-6.563035;
			Ke(0,13)=80.057435;
			Ke(0,14)=-1.772429;
			Ke(0,15)=1.050946;
			Ke(0,16)=-114809.776972;
			Ke(0,17)=276.620055;
			Ke(1,0)=0.274290;
			Ke(1,1)=19.274533;
			Ke(1,2)=-69677.267138;
			Ke(1,3)=-5345.976465;
			Ke(1,4)=72.455893;
			Ke(1,5)=-242.134812;
			Ke(1,6)=114.385663;
			Ke(1,7)=-64.185459;
			Ke(1,8)=3.146925;
			Ke(1,9)=225.988761;
			Ke(1,10)=-15992.393903;
			Ke(1,11)=-1256.738676;
			Ke(1,12)=9.250577;
			Ke(1,13)=-79.622428;
			Ke(1,14)=1.772557;
			Ke(1,15)=-1.074450;
			Ke(1,16)=-115052.076994;
			Ke(1,17)=-275.552633;
			Ke(2,0)=-0.236719;
			Ke(2,1)=-0.004062;
			Ke(2,2)=-0.329982;
			Ke(2,3)=0.764044;
			Ke(2,4)=-65.397388;
			Ke(2,5)=-62.706269;
			Ke(2,6)=-177.047725;
			Ke(2,7)=-8.623446;
			Ke(2,8)=-2.758264;
			Ke(2,9)=-0.045055;
			Ke(2,10)=-0.043273;
			Ke(2,11)=-0.342024;
			Ke(2,12)=-13.718970;
			Ke(2,13)=-16.399598;
			Ke(2,14)=-8.166473;
			Ke(2,15)=-0.311702;
			Ke(2,16)=-0.610030;
			Ke(2,17)=-78.987895;
			Ke(3,0)=-0.237379;
			Ke(3,1)=0.010899;
			Ke(3,2)=-0.247997;
			Ke(3,3)=-2.748512;
			Ke(3,4)=-66.068602;
			Ke(3,5)=63.424713;
			Ke(3,6)=-8.919005;
			Ke(3,7)=-178.954435;
			Ke(3,8)=-2.763623;
			Ke(3,9)=0.125909;
			Ke(3,10)=-0.033473;
			Ke(3,11)=-0.268187;
			Ke(3,12)=-13.824924;
			Ke(3,13)=16.488429;
			Ke(3,14)=-0.314372;
			Ke(3,15)=-8.218297;
			Ke(3,16)=-0.439969;
			Ke(3,17)=80.794949;
			break;
		case 2:
			///com 4
			Ke(0,0)=-0.068655;
			Ke(0,1)=-4.072968;
			Ke(0,2)=-140731.594443;
			Ke(0,3)=9845.306610;
			Ke(0,4)=-157.744682;
			Ke(0,5)=476.823549;
			Ke(0,6)=-129.185773;
			Ke(0,7)=41.993263;
			Ke(0,8)=-2.451449;
			Ke(0,9)=-146.407348;
			Ke(0,10)=-23030.910604;
			Ke(0,11)=1745.539089;
			Ke(0,12)=-14.906770;
			Ke(0,13)=112.650900;
			Ke(0,14)=-1.589633;
			Ke(0,15)=0.412713;
			Ke(0,16)=-269183.329512;
			Ke(0,17)=936.935612;
			Ke(1,0)=0.074971;
			Ke(1,1)=4.065468;
			Ke(1,2)=-141020.534449;
			Ke(1,3)=-9824.424277;
			Ke(1,4)=173.229149;
			Ke(1,5)=-473.430821;
			Ke(1,6)=127.493537;
			Ke(1,7)=-45.085084;
			Ke(1,8)=2.678391;
			Ke(1,9)=146.140302;
			Ke(1,10)=-23039.487831;
			Ke(1,11)=-1736.172121;
			Ke(1,12)=18.361193;
			Ke(1,13)=-111.983628;
			Ke(1,14)=1.559056;
			Ke(1,15)=-0.457575;
			Ke(1,16)=-269984.404096;
			Ke(1,17)=-929.543524;
			Ke(2,0)=-0.077972;
			Ke(2,1)=0.002954;
			Ke(2,2)=-0.871437;
			Ke(2,3)=-7.806278;
			Ke(2,4)=-187.038045;
			Ke(2,5)=-476.401781;
			Ke(2,6)=-403.551995;
			Ke(2,7)=17.701438;
			Ke(2,8)=-2.798389;
			Ke(2,9)=0.107161;
			Ke(2,10)=-0.078333;
			Ke(2,11)=-2.489264;
			Ke(2,12)=-34.068314;
			Ke(2,13)=-72.440174;
			Ke(2,14)=-11.734816;
			Ke(2,15)=-0.281832;
			Ke(2,16)=-2.107521;
			Ke(2,17)=-1414.672861;
			Ke(3,0)=-0.077892;
			Ke(3,1)=-0.000076;
			Ke(3,2)=-0.746030;
			Ke(3,3)=0.656587;
			Ke(3,4)=-187.772037;
			Ke(3,5)=471.314020;
			Ke(3,6)=16.965327;
			Ke(3,7)=-402.886232;
			Ke(3,8)=-2.797760;
			Ke(3,9)=-0.003183;
			Ke(3,10)=-0.075127;
			Ke(3,11)=0.678896;
			Ke(3,12)=-34.183376;
			Ke(3,13)=71.690809;
			Ke(3,14)=-0.296165;
			Ke(3,15)=-11.754733;
			Ke(3,16)=-1.635414;
			Ke(3,17)=1392.672795;
			break;
		case 3:
			//com 3
			Ke(0,0)=-0.080829;
			Ke(0,1)=-5.309731;
			Ke(0,2)=-130933.698020;
			Ke(0,3)=8724.834696;
			Ke(0,4)=-127.379633;
			Ke(0,5)=536.030265;
			Ke(0,6)=-99.513510;
			Ke(0,7)=25.291980;
			Ke(0,8)=-2.236354;
			Ke(0,9)=-147.719043;
			Ke(0,10)=-22148.390986;
			Ke(0,11)=1642.855172;
			Ke(0,12)=-12.027508;
			Ke(0,13)=120.171557;
			Ke(0,14)=-1.258463;
			Ke(0,15)=0.229415;
			Ke(0,16)=-260174.905754;
			Ke(0,17)=1174.226069;
			Ke(1,0)=0.089752;
			Ke(1,1)=5.298117;
			Ke(1,2)=-131205.510767;
			Ke(1,3)=-8703.718759;
			Ke(1,4)=142.219443;
			Ke(1,5)=-532.957299;
			Ke(1,6)=98.110947;
			Ke(1,7)=-28.076862;
			Ke(1,8)=2.482613;
			Ke(1,9)=147.411979;
			Ke(1,10)=-22158.087323;
			Ke(1,11)=-1633.684367;
			Ke(1,12)=15.432614;
			Ke(1,13)=-119.531598;
			Ke(1,14)=1.232679;
			Ke(1,15)=-0.270207;
			Ke(1,16)=-260915.479504;
			Ke(1,17)=-1167.950115;
			Ke(2,0)=-0.104319;
			Ke(2,1)=0.003929;
			Ke(2,2)=-0.854183;
			Ke(2,3)=-7.072851;
			Ke(2,4)=-169.614924;
			Ke(2,5)=-458.141057;
			Ke(2,6)=-379.761306;
			Ke(2,7)=22.373007;
			Ke(2,8)=-2.896085;
			Ke(2,9)=0.109982;
			Ke(2,10)=-0.077868;
			Ke(2,11)=-2.350308;
			Ke(2,12)=-31.078211;
			Ke(2,13)=-69.238219;
			Ke(2,14)=-11.293648;
			Ke(2,15)=-0.179669;
			Ke(2,16)=-2.143388;
			Ke(2,17)=-1389.245991;
			Ke(3,0)=-0.104193;
			Ke(3,1)=-0.000307;
			Ke(3,2)=-0.790902;
			Ke(3,3)=0.956714;
			Ke(3,4)=-170.364537;
			Ke(3,5)=457.432371;
			Ke(3,6)=22.025686;
			Ke(3,7)=-380.575027;
			Ke(3,8)=-2.894197;
			Ke(3,9)=-0.008608;
			Ke(3,10)=-0.084448;
			Ke(3,11)=0.754968;
			Ke(3,12)=-31.281377;
			Ke(3,13)=69.020719;
			Ke(3,14)=-0.191446;
			Ke(3,15)=-11.323067;
			Ke(3,16)=-1.726190;
			Ke(3,17)=1389.728564;
			break;
		case 4:
			//lambda=[1 1 45 200].*[1/(17000-freq),1/(17000-fleq),1/2000,1/2000].^2;
			//rho=5*[0,0,10,1/((pi/2)^2),1/((pi/2)^2),1/(pi)^2,1/((pi/2)^2),1/((pi/2)^2) 0 0 0 0 0 0 0 0 50 50/(pi)^2];
			Ke(0,0)=-0.032295;
			Ke(0,1)=-2.016175;
			Ke(0,2)=-157928.147851;
			Ke(0,3)=10552.471976;
			Ke(0,4)=-165.972685;
			Ke(0,5)=429.913504;
			Ke(0,6)=-138.743785;
			Ke(0,7)=70.829761;
			Ke(0,8)=-1.747596;
			Ke(0,9)=-109.787483;
			Ke(0,10)=-23913.729642;
			Ke(0,11)=1796.059902;
			Ke(0,12)=-14.652006;
			Ke(0,13)=104.884121;
			Ke(0,14)=-1.591144;
			Ke(0,15)=0.995191;
			Ke(0,16)=-359957.353471;
			Ke(0,17)=847.336401;
			Ke(1,0)=0.035245;
			Ke(1,1)=2.011899;
			Ke(1,2)=-158240.761665;
			Ke(1,3)=-10526.835553;
			Ke(1,4)=181.768253;
			Ke(1,5)=-424.144487;
			Ke(1,6)=137.069069;
			Ke(1,7)=-75.136548;
			Ke(1,8)=1.908084;
			Ke(1,9)=109.556632;
			Ke(1,10)=-23923.011184;
			Ke(1,11)=-1786.159987;
			Ke(1,12)=18.064892;
			Ke(1,13)=-103.913662;
			Ke(1,14)=1.557226;
			Ke(1,15)=-1.062437;
			Ke(1,16)=-360890.008113;
			Ke(1,17)=-831.768147;
			Ke(2,0)=-0.037970;
			Ke(2,1)=0.001720;
			Ke(2,2)=-0.962302;
			Ke(2,3)=-9.610004;
			Ke(2,4)=-199.237080;
			Ke(2,5)=-557.215150;
			Ke(2,6)=-438.775092;
			Ke(2,7)=27.722767;
			Ke(2,8)=-2.071055;
			Ke(2,9)=0.094127;
			Ke(2,10)=-0.083255;
			Ke(2,11)=-2.868384;
			Ke(2,12)=-36.393485;
			Ke(2,13)=-83.399759;
			Ke(2,14)=-12.175295;
			Ke(2,15)=-0.197003;
			Ke(2,16)=-2.643100;
			Ke(2,17)=-1733.014408;
			Ke(3,0)=-0.024662;
			Ke(3,1)=-0.000264;
			Ke(3,2)=-0.496740;
			Ke(3,3)=1.766074;
			Ke(3,4)=-130.358579;
			Ke(3,5)=388.837247;
			Ke(3,6)=25.631259;
			Ke(3,7)=-319.360004;
			Ke(3,8)=-1.345271;
			Ke(3,9)=-0.014483;
			Ke(3,10)=-0.050451;
			Ke(3,11)=0.711740;
			Ke(3,12)=-25.067799;
			Ke(3,13)=58.885303;
			Ke(3,14)=-0.046082;
			Ke(3,15)=-10.042757;
			Ke(3,16)=-1.171807;
			Ke(3,17)=1204.870709;
			break;
		default:
			Ke.setZero();
			break;
	}
	return Ke;
}
} /* namespace mpc */
