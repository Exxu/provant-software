/**
  ******************************************************************************
  * @file    subsystems/subsys_ContinousContorl/MpcControle.h
  * @author  Richard Andrade
  * @version V1.0.0
  * @date    27-Julho-2015
  * @brief   Mathematic Model for Load Transportation.
  *****************************************************************************/

/* Includes ------------------------------------------------------------------*/
#include "AircraftModel.h"
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/


/* Exported functions definitions --------------------------------------------*/
namespace model {
/** \brief Função principal do módulo de RC.
  * @param  None
  * @retval None
  *
  * Interpreta o recebimento de PPM, calcula sinais de controle e os envia
  * via interface.
  * Devido as diferenças do modelo matematica com a construção mecanica o sinal do angulo do servo direito deve
  * ser adaptado.
  *
  */
AircraftModel::AircraftModel() {

}

AircraftModel::~AircraftModel() {
	// TODO Auto-generated destructor stub
}

Eigen::MatrixXf AircraftModel::MatrixA(Eigen::MatrixXf as, float ts){
	/* Name spaces ------------------------------------------------------------------*/
	using namespace Eigen;
	MatrixXf A(16,16);
	MatrixXf Az(16,16);
	A.setZero();
	float ddxr, ddyr, ddzr;
	ddxr=as(0,0);
	ddyr=as(1,0);
	ddzr=as(2,0);
	A(0,8)=1.0;
	A(1,9)=1.0;
	A(2,10)=1.0;
	A(3,11)=1.0;
	A(4,12)=1.0;
	A(5,13)=1.0;
	A(6,14)=1.0;
	A(7,15)=1.0;
	A(8,3)=0.169726*ddyr - 0.000356926*ddxr - 0.0000589638*ddzr - 0.000578435;
	A(8,4)=0.00318237*ddyr - 0.000000130226*ddxr + 1.00001*ddzr + 9.81006;
	A(8,5)=0.00164473*ddxr - 0.782104*ddyr;
	A(8,6)=1.0657*ddyr - 0.00223449*ddxr + 1.01079*ddzr + 9.91582;
	A(8,7)=0.00226022*ddxr - 1.07162*ddyr + 1.014*ddzr + 9.947369999999999;
	A(9,3)=0.00253562*ddyr - 0.0000118936*ddxr - 0.9998860000000001*ddzr - 9.80888;
	A(9,4)=0.0131795*ddyr - 0.0000277159*ddxr + 0.0000127235*ddzr + 0.000124817;
	A(9,5)=0.0246931*ddyr - 0.0000519285*ddxr;
	A(9,6)=0.0246787*ddyr - 0.0000517468*ddxr + 0.0230777*ddzr + 0.226393;
	A(9,7)=0.0242573*ddyr - 0.0000511609*ddxr - 0.0226941*ddzr - 0.222629;
	A(10,3)=0.782274*ddyr - 0.00164509*ddxr - 0.0000000776004*ddzr - 0.00000076126;
	A(10,4)=0.0000520179*ddxr - 0.0247356*ddyr - 0.0000000410259*ddzr - 0.000000402464;
	A(10,6)=0.000777279*ddyr - 0.00000162976*ddxr + 0.000734428*ddzr + 0.00720474;
	A(10,7)=0.00000193109*ddxr - 0.00091559*ddyr + 0.000860784*ddzr + 0.0084443;
	A(11,3)=0.004191*ddyr - 0.00000881297*ddxr + 0.00007958349999999999*ddzr + 0.000780714;
	A(11,4)=0.127542*ddyr - 0.000268215*ddxr - 0.000188258*ddzr - 0.00184681;
	A(11,6)=0.000818829*ddxr - 0.390509*ddyr - 0.364889*ddzr - 3.57956;
	A(11,7)=0.000809653*ddxr - 0.383888*ddyr + 0.358872*ddzr + 3.52053;
	A(12,3)=2.19277*ddyr - 0.00461131*ddxr - 0.0009262059999999999*ddzr - 0.00908608;
	A(12,4)=0.0588651*ddyr - 0.00012379*ddxr + 0.0000568281*ddzr + 0.000557483;
	A(12,6)=8.6128*ddyr - 0.018059*ddxr + 8.130710000000001*ddzr + 79.76220000000001;
	A(12,7)=0.0182821*ddxr - 8.66804*ddyr + 8.16344*ddzr + 80.0834;
	A(13,3)=0.336497*ddyr - 0.0007076129999999999*ddxr + 0.00372148*ddzr + 0.0365077;
	A(13,4)=0.0192236*ddxr - 9.14129*ddyr - 0.008829770000000001*ddzr - 0.08662010000000001;
	A(13,6)=4.72387*ddyr - 0.00990543*ddxr + 4.36685*ddzr + 42.8388;
	A(13,7)=4.75082*ddyr - 0.0100195*ddxr - 4.38267*ddzr - 42.994;
	A(14,3)=0.00528045*ddxr - 2.51097*ddyr + 0.00124667*ddzr + 0.0122298;
	A(14,4)=0.00179778*ddxr - 0.854886*ddyr - 0.000825302*ddzr - 0.008096219999999999;
	A(14,6)=0.0171281*ddxr - 8.168850000000001*ddyr - 7.71967*ddzr - 75.7299;
	A(14,7)=9.04871*ddyr - 0.0190849*ddxr - 8.51398*ddzr - 83.5222;
	A(15,3)=0.00525816*ddxr - 2.50037*ddyr + 0.000598035*ddzr + 0.00586672;
	A(15,4)=0.739226*ddyr - 0.00155455*ddxr + 0.0007136449999999999*ddzr + 0.00700085;
	A(15,6)=0.0188542*ddxr - 8.992039999999999*ddyr - 8.48064*ddzr - 83.1951;
	A(15,7)=8.220549999999999*ddyr - 0.0173383*ddxr - 7.75*ddzr - 76.0275;
	Az=MatrixXf::Identity(16,16)+A*ts;
	return Az;
}
Eigen::MatrixXf AircraftModel::MatrixB(float ts){
	/* Name spaces ------------------------------------------------------------------*/
	using namespace Eigen;
	MatrixXf B(16,4);
	B.setZero();
	B(8,0)=1.169620E-05;
	B(8,1)=-1.172010E-05;
	B(8,2)=-7.284300E-03;
	B(8,3)=-7.282180E-03;
	B(9,0)=3.704530E-04;
	B(9,1)=-3.712080E-04;
	B(9,2)=-4.307330E-06;
	B(9,3)=1.327860E-07;
	B(10,0)=4.968160E-04;
	B(10,1)=4.993770E-04;
	B(10,2)=-1.221710E-05;
	B(10,3)=-1.223120E-05;
	B(11,0)=-5.218580E-03;
	B(11,1)=5.229220E-03;
	B(11,2)=6.597720E-05;
	B(11,3)=2.806970E-07;
	B(12,0)=1.880560E-04;
	B(12,1)=-1.884400E-04;
	B(12,2)=-1.162470E-01;
	B(12,3)=-1.162260E-01;
	B(13,0)=1.527600E-04;
	B(13,1)=-1.530720E-04;
	B(13,2)=1.652440E-03;
	B(13,3)=-1.428870E-03;
	B(14,0)=-1.740430E-04;
	B(14,1)=1.743980E-04;
	B(14,2)=9.350060E+00;
	B(14,3)=1.156600E-01;
	B(15,0)=-2.006650E-04;
	B(15,1)=2.010740E-04;
	B(15,2)=1.156600E-01;
	B(15,3)=9.350010E+00;
	return B*ts;
}
Eigen::MatrixXf AircraftModel::MatrixC(){
	/* Name spaces ------------------------------------------------------------------*/
	using namespace Eigen;
	MatrixXf C(16,16);
	C.setIdentity();
	return C;
}
Eigen::MatrixXf AircraftModel::MatrixSumRho(){
	using namespace Eigen;
	VectorXf Rho(16);
	Rho<<10,10,10,4.0528E-01,4.0528E-01,1.0132E-01,4.0528E-01,4.0528E-01,0,0,0,0,0,0,0,0;
	return Rho.asDiagonal();
}
Eigen::MatrixXf AircraftModel::MatrixSumLambda(){
	using namespace Eigen;
	Vector4f Lambda;
	Lambda<<1.9602E-08,1.9493E-08,1.1111E-05,1.1111E-05;
	return Lambda.asDiagonal();
}
Eigen::MatrixXf AircraftModel::RefrenceControl(Eigen::MatrixXf as){
	using namespace Eigen;
	float ddxr, ddyr, ddzr;
	ddxr=as(0,0);
	ddyr=as(1,0);
	ddzr=as(2,0);
	MatrixXf ur(4,1);
	float fR=9857.54 - 2.21085*ddxr + 1054.44*ddyr + 1004.85*ddzr;
	float fL=9837.48 + 2.22439*ddxr - 1054.62*ddyr + 1002.8*ddzr;
	float tauR=0;
	float tauL=0;
	ur<<fR,fL,tauR,tauL;
	return ur;

}
Eigen::MatrixXf AircraftModel::MatrixTerminalCost(){
	/* Name spaces ------------------------------------------------------------------*/
	using namespace Eigen;
	MatrixXf P(16,16);
	P.setZero();
	P(0,0)=1.380804E+03;
	P(0,1)=-8.657472E+00;
	P(0,2)=-4.165974E-01;
	P(0,3)=3.850867E+00;
	P(0,4)=3.003655E+02;
	P(0,5)=-5.483549E-02;
	P(0,6)=9.674183E+01;
	P(0,7)=9.707860E+01;
	P(0,8)=3.384779E+02;
	P(0,9)=-3.135100E+00;
	P(0,10)=4.056355E-02;
	P(0,11)=-9.856251E-02;
	P(0,12)=-7.652761E+00;
	P(0,13)=-3.204818E-02;
	P(0,14)=1.455777E+00;
	P(0,15)=1.459834E+00;
	P(1,0)=-8.657472E+00;
	P(1,1)=1.524515E+03;
	P(1,2)=4.860813E-01;
	P(1,3)=-4.650732E+02;
	P(1,4)=-5.448542E+00;
	P(1,5)=1.422172E+00;
	P(1,6)=3.767883E+00;
	P(1,7)=-7.476791E+00;
	P(1,8)=-3.519856E+00;
	P(1,9)=4.152399E+02;
	P(1,10)=6.543892E-02;
	P(1,11)=-6.822366E+00;
	P(1,12)=-1.616720E-01;
	P(1,13)=8.699052E-01;
	P(1,14)=4.791826E-02;
	P(1,15)=-1.097367E-01;
	P(2,0)=-4.165974E-01;
	P(2,1)=4.860813E-01;
	P(2,2)=1.028232E+03;
	P(2,3)=-8.098362E-01;
	P(2,4)=-2.122064E-02;
	P(2,5)=6.690862E-02;
	P(2,6)=2.035401E-01;
	P(2,7)=4.606159E-02;
	P(2,8)=-1.164860E-01;
	P(2,9)=2.715386E-01;
	P(2,10)=2.239005E+02;
	P(2,11)=-1.289410E-01;
	P(2,12)=1.909488E-02;
	P(2,13)=2.091900E-02;
	P(2,14)=4.139891E-03;
	P(2,15)=1.084847E-03;
	P(3,0)=3.850867E+00;
	P(3,1)=-4.650732E+02;
	P(3,2)=-8.098362E-01;
	P(3,3)=2.141211E+02;
	P(3,4)=2.522491E+00;
	P(3,5)=-2.839466E-01;
	P(3,6)=-1.873270E+00;
	P(3,7)=3.684631E+00;
	P(3,8)=1.559431E+00;
	P(3,9)=-1.564553E+02;
	P(3,10)=-1.822128E-01;
	P(3,11)=6.554612E+00;
	P(3,12)=9.288505E-02;
	P(3,13)=-3.194347E-01;
	P(3,14)=-2.540471E-02;
	P(3,15)=5.614455E-02;
	P(4,0)=3.003655E+02;
	P(4,1)=-5.448542E+00;
	P(4,2)=-2.122064E-02;
	P(4,3)=2.522491E+00;
	P(4,4)=1.103421E+02;
	P(4,5)=-2.450994E-02;
	P(4,6)=3.404582E+01;
	P(4,7)=3.422644E+01;
	P(4,8)=9.357328E+01;
	P(4,9)=-1.901682E+00;
	P(4,10)=3.030795E-02;
	P(4,11)=2.580531E-02;
	P(4,12)=1.144065E-02;
	P(4,13)=-1.459620E-02;
	P(4,14)=5.414768E-01;
	P(4,15)=5.439997E-01;
	P(5,0)=-5.483549E-02;
	P(5,1)=1.422172E+00;
	P(5,2)=6.690862E-02;
	P(5,3)=-2.839466E-01;
	P(5,4)=-2.450994E-02;
	P(5,5)=7.139320E+00;
	P(5,6)=3.274010E+00;
	P(5,7)=-3.275006E+00;
	P(5,8)=-1.992665E-02;
	P(5,9)=4.657739E-01;
	P(5,10)=2.464056E-02;
	P(5,11)=8.707631E-02;
	P(5,12)=2.112324E-03;
	P(5,13)=1.312815E+00;
	P(5,14)=5.884109E-02;
	P(5,15)=-5.876785E-02;
	P(6,0)=9.674183E+01;
	P(6,1)=3.767883E+00;
	P(6,2)=2.035401E-01;
	P(6,3)=-1.873270E+00;
	P(6,4)=3.404582E+01;
	P(6,5)=3.274010E+00;
	P(6,6)=1.829114E+01;
	P(6,7)=8.921683E+00;
	P(6,8)=2.914634E+01;
	P(6,9)=1.321522E+00;
	P(6,10)=7.676594E-02;
	P(6,11)=-4.525313E-02;
	P(6,12)=3.077193E-01;
	P(6,13)=9.738939E-01;
	P(6,14)=3.225479E-01;
	P(6,15)=1.339677E-01;
	P(7,0)=9.707860E+01;
	P(7,1)=-7.476791E+00;
	P(7,2)=4.606159E-02;
	P(7,3)=3.684631E+00;
	P(7,4)=3.422644E+01;
	P(7,5)=-3.275006E+00;
	P(7,6)=8.921683E+00;
	P(7,7)=1.839633E+01;
	P(7,8)=2.926429E+01;
	P(7,9)=-2.633245E+00;
	P(7,10)=1.982808E-02;
	P(7,11)=8.737532E-02;
	P(7,12)=3.103632E-01;
	P(7,13)=-9.782374E-01;
	P(7,14)=1.340854E-01;
	P(7,15)=3.240212E-01;
	P(8,0)=3.384779E+02;
	P(8,1)=-3.519856E+00;
	P(8,2)=-1.164860E-01;
	P(8,3)=1.559431E+00;
	P(8,4)=9.357328E+01;
	P(8,5)=-1.992665E-02;
	P(8,6)=2.914634E+01;
	P(8,7)=2.926429E+01;
	P(8,8)=9.643515E+01;
	P(8,9)=-1.236761E+00;
	P(8,10)=8.723677E-03;
	P(8,11)=-1.837107E-02;
	P(8,12)=-1.760439E+00;
	P(8,13)=-1.111986E-02;
	P(8,14)=4.462827E-01;
	P(8,15)=4.477698E-01;
	P(9,0)=-3.135100E+00;
	P(9,1)=4.152399E+02;
	P(9,2)=2.715386E-01;
	P(9,3)=-1.564553E+02;
	P(9,4)=-1.901682E+00;
	P(9,5)=4.657739E-01;
	P(9,6)=1.321522E+00;
	P(9,7)=-2.633245E+00;
	P(9,8)=-1.236761E+00;
	P(9,9)=1.301018E+02;
	P(9,10)=4.811955E-02;
	P(9,11)=-3.110467E+00;
	P(9,12)=-5.762711E-02;
	P(9,13)=2.910780E-01;
	P(9,14)=1.738494E-02;
	P(9,15)=-3.932282E-02;
	P(10,0)=4.056355E-02;
	P(10,1)=6.543892E-02;
	P(10,2)=2.239005E+02;
	P(10,3)=-1.822128E-01;
	P(10,4)=3.030795E-02;
	P(10,5)=2.464056E-02;
	P(10,6)=7.676594E-02;
	P(10,7)=1.982808E-02;
	P(10,8)=8.723677E-03;
	P(10,9)=4.811955E-02;
	P(10,10)=6.705487E+01;
	P(10,11)=-3.961283E-02;
	P(10,12)=4.030736E-03;
	P(10,13)=7.903278E-03;
	P(10,14)=1.513328E-03;
	P(10,15)=3.920027E-04;
	P(11,0)=-9.856251E-02;
	P(11,1)=-6.822366E+00;
	P(11,2)=-1.289410E-01;
	P(11,3)=6.554612E+00;
	P(11,4)=2.580531E-02;
	P(11,5)=8.707631E-02;
	P(11,6)=-4.525313E-02;
	P(11,7)=8.737532E-02;
	P(11,8)=-1.837107E-02;
	P(11,9)=-3.110467E+00;
	P(11,10)=-3.961283E-02;
	P(11,11)=6.123317E-01;
	P(11,12)=7.487598E-03;
	P(11,13)=2.387202E-02;
	P(11,14)=-5.271220E-04;
	P(11,15)=1.409891E-03;
	P(12,0)=-7.652761E+00;
	P(12,1)=-1.616720E-01;
	P(12,2)=1.909488E-02;
	P(12,3)=9.288505E-02;
	P(12,4)=1.144065E-02;
	P(12,5)=2.112324E-03;
	P(12,6)=3.077193E-01;
	P(12,7)=3.103632E-01;
	P(12,8)=-1.760439E+00;
	P(12,9)=-5.762711E-02;
	P(12,10)=4.030736E-03;
	P(12,11)=7.487598E-03;
	P(12,12)=2.685274E-01;
	P(12,13)=5.524827E-04;
	P(12,14)=8.781515E-03;
	P(12,15)=8.826636E-03;
	P(13,0)=-3.204818E-02;
	P(13,1)=8.699052E-01;
	P(13,2)=2.091900E-02;
	P(13,3)=-3.194347E-01;
	P(13,4)=-1.459620E-02;
	P(13,5)=1.312815E+00;
	P(13,6)=9.738939E-01;
	P(13,7)=-9.782374E-01;
	P(13,8)=-1.111986E-02;
	P(13,9)=2.910780E-01;
	P(13,10)=7.903278E-03;
	P(13,11)=2.387202E-02;
	P(13,12)=5.524827E-04;
	P(13,13)=3.606862E-01;
	P(13,14)=1.861918E-02;
	P(13,15)=-1.865799E-02;
	P(14,0)=1.455777E+00;
	P(14,1)=4.791826E-02;
	P(14,2)=4.139891E-03;
	P(14,3)=-2.540471E-02;
	P(14,4)=5.414768E-01;
	P(14,5)=5.884109E-02;
	P(14,6)=3.225479E-01;
	P(14,7)=1.340854E-01;
	P(14,8)=4.462827E-01;
	P(14,9)=1.738494E-02;
	P(14,10)=1.513328E-03;
	P(14,11)=-5.271220E-04;
	P(14,12)=8.781515E-03;
	P(14,13)=1.861918E-02;
	P(14,14)=8.503157E-03;
	P(14,15)=1.630718E-03;
	P(15,0)=1.459834E+00;
	P(15,1)=-1.097367E-01;
	P(15,2)=1.084847E-03;
	P(15,3)=5.614455E-02;
	P(15,4)=5.439997E-01;
	P(15,5)=-5.876785E-02;
	P(15,6)=1.339677E-01;
	P(15,7)=3.240212E-01;
	P(15,8)=4.477698E-01;
	P(15,9)=-3.932282E-02;
	P(15,10)=3.920027E-04;
	P(15,11)=1.409891E-03;
	P(15,12)=8.826636E-03;
	P(15,13)=-1.865799E-02;
	P(15,14)=1.630718E-03;
	P(15,15)=8.518467E-03;
	return P;
}
Eigen::VectorXf AircraftModel::OutputMaxVector(){
	using namespace Eigen;
	VectorXf ymax(16,1);
	ymax<< 0.6,0.6,6,0.5,0.5,0.5,0.6,0.6,20,20,20,20,20,20,20,20;
	return ymax;
}
Eigen::VectorXf AircraftModel::OutputMinVector(){
	using namespace Eigen;
	VectorXf ymin(16,1);
	ymin<< -0.6,-0.6,0,-0.5,-0.5,-0.5,-0.6,-0.6,-20,-20,-20,-20,-20,-20,-20,-20;
	return ymin;
}
Eigen::VectorXf AircraftModel::ControlMaxVector(){
	using namespace Eigen;
	VectorXf umax(4,1);
	umax<< 17000,17000,2000,2000;
	return umax;
}
Eigen::VectorXf AircraftModel::ControlMinVector(){
	using namespace Eigen;
	VectorXf umin(4,1);
	umin<< 0,0,-2000,-2000;
	return umin;
}
/* Private functions ---------------------------------------------------------*/
} /* namespace loadmodel */
